# vim: set filetype=python :
import os, sys

if sys.platform == 'win32':
    # Prefer to find the mingw toolchain first, before MSVC - because MSVC is a
    # pathetic toy and we don't support it.
    env = Environment(tools=['mingw'])
else:
    env = Environment()
    
debug = ARGUMENTS.get('debug', 0)
if int(debug):
    env.Append(CCFLAGS = '-g')
    env.Append(CFLAGS = ['-DDEBUG'])

# Respect common environment variables that users may want to set
IMPORTED_VARS = ['CC', 'CFLAGS', 'CPPFLAGS', 'CCFLAGS']
for var in IMPORTED_VARS:
    value = os.environ.get(var)
    if value: env[var] = value
env.Append(LINKFLAGS=Split(os.environ.get('LDFLAGS')))

COMMON_LIBS = ['amp']
if sys.platform == 'win32':
    # socket lib
    COMMON_LIBS.append('ws2_32')

COMMON_SOURCES = ['strtonum.c', 'common.c']

SUMCLIENT_SOURCES      = ['sumclient.c', 'net_utils.c'] + COMMON_SOURCES
BENCHCLIENT_SOURCES    = ['benchclient.c', 'net_utils.c', 'time_utils.c'] + \
                          COMMON_SOURCES
BENCH_PARSING_SOURCES  = ['bench_parsing.c'] + COMMON_SOURCES
ASYNCSERVER_SOURCES    = ['asyncserver.c'] + COMMON_SOURCES

env.Append(CPPPATH = ['/usr/local/include/'])
env.Append(LIBPATH = ['/usr/local/lib/'])

# Where my libevent2 is installed...
env.Append(CPPPATH = ['/home/teratorn/altsys/include/'])
env.Append(LIBPATH = ['/home/teratorn/altsys/lib/'])

# ...and mine...
env.Append(CPPPATH = ['/opt/local/include/'])
env.Append(LIBPATH = ['/opt/local/lib/'])

env.Append(CPPPATH = ['..'])
env.Append(LIBPATH = ['..'])

# Strict compilation
#env.Append(CFLAGS = ['-Wall', '-Wstrict-prototypes', '-ansi', '-pedantic'])

# Optimisation
#env.Append(CCFLAGS = ['-O2'])



#
# Build targets
#


# Target: `sum_client' executable.
env.Program('sum_client', SUMCLIENT_SOURCES, LIBS=COMMON_LIBS)

# Target: `bench_client' executable.
env3 = env.Clone()
env3['OBJPREFIX'] = 'bench-' # avoid object file conflicts
env3.Program('bench_client', BENCHCLIENT_SOURCES, LIBS=COMMON_LIBS)

# Target: `bench_parsing' executable.
env4 = env.Clone()
env4['OBJPREFIX'] = 'bench-parsing' # avoid object file conflicts
env4.Program('bench_parsing', BENCH_PARSING_SOURCES, LIBS=COMMON_LIBS)

# Target: `bench_parsing_new' executable.
env5 = env.Clone()
env5['OBJPREFIX'] = 'bench-parsing-new' # avoid object file conflicts
env5.Program('bench_parsing_new', ['bench_parsing_new.c'] + COMMON_SOURCES, LIBS=COMMON_LIBS)

# Target: `async_server' executable. Used with `sum_client' and `bench_client'.
env2 = env.Clone()
env2['OBJPREFIX'] = 'async-' # avoid object file conflicts
env2.Program('async_server', ASYNCSERVER_SOURCES, LIBS=COMMON_LIBS+['event'])

